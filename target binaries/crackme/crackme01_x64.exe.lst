.text:0000000140001000 ;
.text:0000000140001000 ; +-------------------------------------------------------------------------+
.text:0000000140001000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:0000000140001000 ; |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
.text:0000000140001000 ; |                      License info: 48-591F-7CB6-D6                      |
.text:0000000140001000 ; |                       Think-Cell Operations GmbH                        |
.text:0000000140001000 ; +-------------------------------------------------------------------------+
.text:0000000140001000 ;
.text:0000000140001000 ; Input SHA256 : 782F1A79B1F40AB7807B8F28180680ACE6774703C62E6A83500FEA3D595BB3CB
.text:0000000140001000 ; Input MD5    : 3ECE7EBDCE5BA824D5E07496E8C847E0
.text:0000000140001000 ; Input CRC32  : 7C1D50B9
.text:0000000140001000
.text:0000000140001000 ; File Name   : C:\wtf\target binaries\crackme\crackme01_x64.exe
.text:0000000140001000 ; Format      : Portable executable for AMD64 (PE)
.text:0000000140001000 ; Imagebase   : 140000000
.text:0000000140001000 ; Timestamp   : 49DCD58C (Wed Apr 08 16:49:16 2009)
.text:0000000140001000 ; Section 1. (virtual address 00001000)
.text:0000000140001000 ; Virtual size                  : 00000271 (    625.)
.text:0000000140001000 ; Section size in file          : 00000400 (   1024.)
.text:0000000140001000 ; Offset to raw data for section: 00000400
.text:0000000140001000 ; Flags 60000020: Text Executable Readable
.text:0000000140001000 ; Alignment     : default
.text:0000000140001000
.text:0000000140001000                 .686p
.text:0000000140001000                 .mmx
.text:0000000140001000                 .model flat
.text:0000000140001000
.text:0000000140001000 ; ===========================================================================
.text:0000000140001000
.text:0000000140001000 ; Segment type: Pure code
.text:0000000140001000 ; Segment permissions: Read/Execute
.text:0000000140001000 _text           segment para public 'CODE' use64
.text:0000000140001000                 assume cs:_text
.text:0000000140001000                 ;org 140001000h
.text:0000000140001000                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text:0000000140001000
.text:0000000140001000 ; =============== S U B R O U T I N E =======================================
.text:0000000140001000
.text:0000000140001000
.text:0000000140001000 sub_140001000   proc near               ; CODE XREF: DialogFunc+50↓p
.text:0000000140001000                                         ; DATA XREF: .rdata:00000001400020C4↓o ...
.text:0000000140001000
.text:0000000140001000 var_18          = byte ptr -18h
.text:0000000140001000 var_8           = qword ptr -8
.text:0000000140001000
.text:0000000140001000                 sub     rsp, 18h
.text:0000000140001004                 cmp     edx, 13h
.text:0000000140001007                 mov     r8, rcx
.text:000000014000100A                 jz      short loc_140001013
.text:000000014000100C
.text:000000014000100C loc_14000100C:                          ; CODE XREF: sub_140001000+23↓j
.text:000000014000100C                 xor     eax, eax
.text:000000014000100E                 add     rsp, 18h
.text:0000000140001012                 retn
.text:0000000140001013 ; ---------------------------------------------------------------------------
.text:0000000140001013
.text:0000000140001013 loc_140001013:                          ; CODE XREF: sub_140001000+A↑j
.text:0000000140001013                 xor     edx, edx
.text:0000000140001015                 lea     rax, [r8+4]
.text:0000000140001019                 mov     ecx, edx
.text:000000014000101B                 xchg    ax, ax
.text:000000014000101D                 db      66h, 66h
.text:000000014000101D                 xchg    ax, ax
.text:0000000140001020
.text:0000000140001020 loc_140001020:                          ; CODE XREF: sub_140001000+2F↓j
.text:0000000140001020                 cmp     byte ptr [rax], 2Dh ; '-'
.text:0000000140001023                 jnz     short loc_14000100C
.text:0000000140001025                 add     ecx, 1
.text:0000000140001028                 add     rax, 5
.text:000000014000102C                 cmp     ecx, 3
.text:000000014000102F                 jb      short loc_140001020
.text:0000000140001031
.text:0000000140001031 loc_140001031:                          ; DATA XREF: .rdata:00000001400020C4↓o
.text:0000000140001031                                         ; .rdata:00000001400020D8↓o ...
.text:0000000140001031                 mov     [rsp+18h+var_8], rbx
.text:0000000140001036                 mov     r10d, edx
.text:0000000140001039                 mov     r11d, edx
.text:000000014000103C                 lea     rbx, [rsp+18h+var_18]
.text:0000000140001040                 mov     r9, r8
.text:0000000140001043                 nop
.text:0000000140001044                 db      66h, 66h
.text:0000000140001044                 xchg    ax, ax
.text:0000000140001048                 db      66h, 66h
.text:0000000140001048                 xchg    ax, ax
.text:000000014000104C                 db      66h, 66h
.text:000000014000104C                 xchg    ax, ax
.text:0000000140001050
.text:0000000140001050 loc_140001050:                          ; CODE XREF: sub_140001000+A2↓j
.text:0000000140001050                 mov     rcx, rdx
.text:0000000140001053
.text:0000000140001053 loc_140001053:                          ; CODE XREF: sub_140001000+6C↓j
.text:0000000140001053                 movsx   eax, byte ptr [r9+rcx]
.text:0000000140001058                 add     eax, 0FFFFFFD0h
.text:000000014000105B                 cmp     eax, 9
.text:000000014000105E                 ja      loc_1400010FD
.text:0000000140001064                 add     rcx, 1
.text:0000000140001068                 cmp     rcx, 4
.text:000000014000106C                 jl      short loc_140001053
.text:000000014000106E                 movsx   eax, byte ptr [r9]
.text:0000000140001072                 add     al, [r9+1]
.text:0000000140001076                 add     al, [r9+2]
.text:000000014000107A                 movsx   ecx, byte ptr [r9+3]
.text:000000014000107F                 add     eax, ecx
.text:0000000140001081                 add     eax, ecx
.text:0000000140001083                 add     eax, ecx
.text:0000000140001085                 add     rbx, 4
.text:0000000140001089                 add     r11d, 1
.text:000000014000108D                 add     r9, 5
.text:0000000140001091                 lea     ecx, [rcx+rax-150h]
.text:0000000140001098                 mov     [rbx-4], ecx
.text:000000014000109B                 add     r10d, ecx
.text:000000014000109E                 cmp     r11d, 4
.text:00000001400010A2                 jb      short loc_140001050
.text:00000001400010A4                 shr     r10d, 2
.text:00000001400010A8                 mov     ecx, edx
.text:00000001400010AA                 lea     rax, [rsp+18h+var_18]
.text:00000001400010AE                 xchg    ax, ax
.text:00000001400010B0
.text:00000001400010B0 loc_1400010B0:                          ; CODE XREF: sub_140001000+BF↓j
.text:00000001400010B0                 cmp     [rax], r10d
.text:00000001400010B3                 jnz     short loc_1400010FD
.text:00000001400010B5                 add     ecx, 1
.text:00000001400010B8                 add     rax, 4
.text:00000001400010BC                 cmp     ecx, 4
.text:00000001400010BF                 jb      short loc_1400010B0
.text:00000001400010C1                 mov     rax, rdx
.text:00000001400010C4
.text:00000001400010C4 loc_1400010C4:                          ; CODE XREF: sub_140001000+EC↓j
.text:00000001400010C4                 movzx   ecx, byte ptr [r8+rax+5]
.text:00000001400010CA                 cmp     [r8+rax], cl
.text:00000001400010CE                 jz      short loc_1400010FD
.text:00000001400010D0                 movzx   r9d, byte ptr [rax+r8+0Ah]
.text:00000001400010D6                 cmp     cl, r9b
.text:00000001400010D9                 jz      short loc_1400010FD
.text:00000001400010DB                 cmp     r9b, [rax+r8+0Fh]
.text:00000001400010E0                 jz      short loc_1400010FD
.text:00000001400010E2                 add     edx, 1
.text:00000001400010E5                 add     rax, 1
.text:00000001400010E9                 cmp     edx, 4
.text:00000001400010EC                 jb      short loc_1400010C4
.text:00000001400010EE                 mov     eax, 1
.text:00000001400010F3                 mov     rbx, [rsp+18h+var_8]
.text:00000001400010F8                 add     rsp, 18h
.text:00000001400010FC                 retn
.text:00000001400010FD ; ---------------------------------------------------------------------------
.text:00000001400010FD
.text:00000001400010FD loc_1400010FD:                          ; CODE XREF: sub_140001000+5E↑j
.text:00000001400010FD                                         ; sub_140001000+B3↑j ...
.text:00000001400010FD                 xor     eax, eax
.text:00000001400010FF                 mov     rbx, [rsp+18h+var_8]
.text:0000000140001104                 add     rsp, 18h
.text:0000000140001108                 retn
.text:0000000140001108 sub_140001000   endp
.text:0000000140001108
.text:0000000140001108 ; ---------------------------------------------------------------------------
.text:0000000140001109 algn_140001109:                         ; DATA XREF: .pdata:0000000140003018↓o
.text:0000000140001109                 align 10h
.text:0000000140001110
.text:0000000140001110 ; =============== S U B R O U T I N E =======================================
.text:0000000140001110
.text:0000000140001110
.text:0000000140001110 ; INT_PTR __stdcall DialogFunc(HWND, UINT, WPARAM, LPARAM)
.text:0000000140001110 DialogFunc      proc near               ; DATA XREF: start+F↓o
.text:0000000140001110                                         ; .rdata:00000001400020F0↓o ...
.text:0000000140001110
.text:0000000140001110 String          = byte ptr -58h
.text:0000000140001110 arg_0           = qword ptr  8
.text:0000000140001110
.text:0000000140001110                 push    rdi
.text:0000000140001112                 sub     rsp, 70h
.text:0000000140001116                 sub     edx, 10h
.text:0000000140001119                 mov     rdi, rcx
.text:000000014000111C                 jz      loc_140001225
.text:0000000140001122                 sub     edx, 100h
.text:0000000140001128                 jz      loc_1400011B9
.text:000000014000112E                 cmp     edx, 1
.text:0000000140001131                 jnz     short loc_14000113B
.text:0000000140001133                 cmp     r8w, 3E9h
.text:0000000140001139                 jz      short loc_140001143
.text:000000014000113B
.text:000000014000113B loc_14000113B:                          ; CODE XREF: DialogFunc+21↑j
.text:000000014000113B                 xor     eax, eax
.text:000000014000113D                 add     rsp, 70h
.text:0000000140001141                 pop     rdi
.text:0000000140001142                 retn
.text:0000000140001143 ; ---------------------------------------------------------------------------
.text:0000000140001143
.text:0000000140001143 loc_140001143:                          ; CODE XREF: DialogFunc+29↑j
.text:0000000140001143                 lea     r8, [rsp+78h+String] ; lpString
.text:0000000140001148                 mov     r9d, 40h ; '@'  ; cchMax
.text:000000014000114E                 mov     edx, 3EAh       ; nIDDlgItem
.text:0000000140001153                 call    cs:GetDlgItemTextA
.text:0000000140001159                 lea     rcx, [rsp+78h+String]
.text:000000014000115E                 mov     edx, eax
.text:0000000140001160                 call    sub_140001000
.text:0000000140001165                 test    eax, eax
.text:0000000140001167                 jz      short loc_140001191
.text:0000000140001169                 lea     r8, Caption     ; "Well done..."
.text:0000000140001170                 lea     rdx, Text       ; "Good work, Serial is valid !!!"
.text:0000000140001177                 mov     r9d, 40h ; '@'  ; uType
.text:000000014000117D                 mov     rcx, rdi        ; hWnd
.text:0000000140001180                 call    cs:MessageBoxA
.text:0000000140001186                 mov     eax, 1
.text:000000014000118B                 add     rsp, 70h
.text:000000014000118F                 pop     rdi
.text:0000000140001190                 retn
.text:0000000140001191 ; ---------------------------------------------------------------------------
.text:0000000140001191
.text:0000000140001191 loc_140001191:                          ; CODE XREF: DialogFunc+57↑j
.text:0000000140001191                 lea     r8, aTryAgain   ; "Try again..."
.text:0000000140001198                 lea     rdx, aFailSerialIsIn ; "Fail, Serial is invalid !!!"
.text:000000014000119F                 mov     r9d, 10h        ; uType
.text:00000001400011A5                 mov     rcx, rdi        ; hWnd
.text:00000001400011A8                 call    cs:MessageBoxA
.text:00000001400011AE                 mov     eax, 1
.text:00000001400011B3                 add     rsp, 70h
.text:00000001400011B7                 pop     rdi
.text:00000001400011B8                 retn
.text:00000001400011B9 ; ---------------------------------------------------------------------------
.text:00000001400011B9
.text:00000001400011B9 loc_1400011B9:                          ; CODE XREF: DialogFunc+18↑j
.text:00000001400011B9                 mov     edx, 65h ; 'e'  ; lpIconName
.text:00000001400011BE                 mov     rcx, r9         ; hInstance
.text:00000001400011C1
.text:00000001400011C1 loc_1400011C1:                          ; DATA XREF: .rdata:00000001400020F0↓o
.text:00000001400011C1                                         ; .rdata:0000000140002104↓o ...
.text:00000001400011C1                 mov     [rsp+78h+arg_0], rbx
.text:00000001400011C9                 call    cs:LoadIconA
.text:00000001400011CF                 mov     edx, 80h        ; Msg
.text:00000001400011D4                 mov     rcx, rdi        ; hWnd
.text:00000001400011D7                 lea     r8d, [rdx-7Fh]  ; wParam
.text:00000001400011DB                 mov     r9, rax         ; lParam
.text:00000001400011DE                 mov     rbx, rax
.text:00000001400011E1                 call    cs:SendMessageA
.text:00000001400011E7                 mov     r9, rbx         ; lParam
.text:00000001400011EA                 xor     r8d, r8d        ; wParam
.text:00000001400011ED                 mov     edx, 80h        ; Msg
.text:00000001400011F2                 mov     rcx, rdi        ; hWnd
.text:00000001400011F5                 call    cs:SendMessageA
.text:00000001400011FB                 xor     r8d, r8d        ; wParam
.text:00000001400011FE                 lea     r9, lParam      ; "CrackMe #01"
.text:0000000140001205                 lea     edx, [r8+0Ch]   ; Msg
.text:0000000140001209                 mov     rcx, rdi        ; hWnd
.text:000000014000120C                 call    cs:SendMessageA
.text:0000000140001212                 mov     rbx, [rsp+78h+arg_0]
.text:000000014000121A                 mov     eax, 1
.text:000000014000121F                 add     rsp, 70h
.text:0000000140001223                 pop     rdi
.text:0000000140001224                 retn
.text:0000000140001225 ; ---------------------------------------------------------------------------
.text:0000000140001225
.text:0000000140001225 loc_140001225:                          ; CODE XREF: DialogFunc+C↑j
.text:0000000140001225                                         ; DATA XREF: .pdata:0000000140003030↓o ...
.text:0000000140001225                 xor     edx, edx        ; nResult
.text:0000000140001227                 call    cs:EndDialog
.text:000000014000122D                 mov     eax, 1
.text:0000000140001232                 add     rsp, 70h
.text:0000000140001236                 pop     rdi
.text:0000000140001237                 retn
.text:0000000140001237 DialogFunc      endp
.text:0000000140001237
.text:0000000140001237 ; ---------------------------------------------------------------------------
.text:0000000140001238 algn_140001238:                         ; DATA XREF: .pdata:000000014000303C↓o
.text:0000000140001238                 align 20h
.text:0000000140001240
.text:0000000140001240 ; =============== S U B R O U T I N E =======================================
.text:0000000140001240
.text:0000000140001240 ; Attributes: noreturn
.text:0000000140001240
.text:0000000140001240                 public start
.text:0000000140001240 start           proc near               ; DATA XREF: .pdata:0000000140003048↓o
.text:0000000140001240
.text:0000000140001240 dwInitParam     = qword ptr -18h
.text:0000000140001240
.text:0000000140001240                 sub     rsp, 38h
.text:0000000140001244                 xor     ecx, ecx        ; lpModuleName
.text:0000000140001246                 call    cs:GetModuleHandleA
.text:000000014000124C                 xor     r8d, r8d        ; hWndParent
.text:000000014000124F                 lea     r9, DialogFunc  ; lpDialogFunc
.text:0000000140001256                 lea     edx, [r8+65h]   ; lpTemplateName
.text:000000014000125A                 mov     rcx, rax        ; hInstance
.text:000000014000125D                 mov     [rsp+38h+dwInitParam], rax ; dwInitParam
.text:0000000140001262                 call    cs:DialogBoxParamA
.text:0000000140001268                 mov     ecx, eax        ; uExitCode
.text:000000014000126A                 call    cs:ExitProcess
.text:000000014000126A ; ---------------------------------------------------------------------------
.text:0000000140001270                 db 0CCh
.text:0000000140001270 start           endp
.text:0000000140001270
.text:0000000140001271 algn_140001271:                         ; DATA XREF: .pdata:0000000140003048↓o
.text:0000000140001271                 align 200h
.text:0000000140001400                 dq 180h dup(?)
.text:0000000140001400 _text           ends
.text:0000000140001400
.idata:0000000140002000 ; Section 2. (virtual address 00002000)
.idata:0000000140002000 ; Virtual size                  : 00000246 (    582.)
.idata:0000000140002000 ; Section size in file          : 00000400 (   1024.)
.idata:0000000140002000 ; Offset to raw data for section: 00000800
.idata:0000000140002000 ; Flags 40000040: Data Readable
.idata:0000000140002000 ; Alignment     : default
.idata:0000000140002000 ;
.idata:0000000140002000 ; Imports from KERNEL32.dll
.idata:0000000140002000 ;
.idata:0000000140002000 ; ===========================================================================
.idata:0000000140002000
.idata:0000000140002000 ; Segment type: Externs
.idata:0000000140002000 ; _idata
.idata:0000000140002000 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0000000140002000                 extrn GetModuleHandleA:qword
.idata:0000000140002000                                         ; CODE XREF: start+6↑p
.idata:0000000140002000                                         ; DATA XREF: start+6↑r ...
.idata:0000000140002008 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0000000140002008                 extrn ExitProcess:qword ; CODE XREF: start+2A↑p
.idata:0000000140002008                                         ; DATA XREF: start+2A↑r
.idata:0000000140002010
.idata:0000000140002018 ;
.idata:0000000140002018 ; Imports from USER32.dll
.idata:0000000140002018 ;
.idata:0000000140002018 ; BOOL (__stdcall *EndDialog)(HWND hDlg, INT_PTR nResult)
.idata:0000000140002018                 extrn EndDialog:qword   ; CODE XREF: DialogFunc+117↑p
.idata:0000000140002018                                         ; DATA XREF: DialogFunc+117↑r ...
.idata:0000000140002020 ; LRESULT (__stdcall *SendMessageA)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.idata:0000000140002020                 extrn SendMessageA:qword
.idata:0000000140002020                                         ; CODE XREF: DialogFunc+D1↑p
.idata:0000000140002020                                         ; DialogFunc+E5↑p ...
.idata:0000000140002028 ; HICON (__stdcall *LoadIconA)(HINSTANCE hInstance, LPCSTR lpIconName)
.idata:0000000140002028                 extrn LoadIconA:qword   ; CODE XREF: DialogFunc+B9↑p
.idata:0000000140002028                                         ; DATA XREF: DialogFunc+B9↑r
.idata:0000000140002030 ; int (__stdcall *MessageBoxA)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
.idata:0000000140002030                 extrn MessageBoxA:qword ; CODE XREF: DialogFunc+70↑p
.idata:0000000140002030                                         ; DialogFunc+98↑p
.idata:0000000140002030                                         ; DATA XREF: ...
.idata:0000000140002038 ; UINT (__stdcall *GetDlgItemTextA)(HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax)
.idata:0000000140002038                 extrn GetDlgItemTextA:qword
.idata:0000000140002038                                         ; CODE XREF: DialogFunc+43↑p
.idata:0000000140002038                                         ; DATA XREF: DialogFunc+43↑r
.idata:0000000140002040 ; INT_PTR (__stdcall *DialogBoxParamA)(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
.idata:0000000140002040                 extrn DialogBoxParamA:qword
.idata:0000000140002040                                         ; CODE XREF: start+22↑p
.idata:0000000140002040                                         ; DATA XREF: start+22↑r
.idata:0000000140002048
.idata:0000000140002048
.rdata:0000000140002050 ; ===========================================================================
.rdata:0000000140002050
.rdata:0000000140002050 ; Segment type: Pure data
.rdata:0000000140002050 ; Segment permissions: Read
.rdata:0000000140002050 _rdata          segment para public 'DATA' use64
.rdata:0000000140002050                 assume cs:_rdata
.rdata:0000000140002050                 ;org 140002050h
.rdata:0000000140002050 ; const LPARAM lParam
.rdata:0000000140002050 lParam          db 'CrackMe #01',0      ; DATA XREF: DialogFunc+EE↑o
.rdata:000000014000205C                 align 20h
.rdata:0000000140002060 ; const CHAR Caption[]
.rdata:0000000140002060 Caption         db 'Well done...',0     ; DATA XREF: DialogFunc+59↑o
.rdata:000000014000206D                 align 10h
.rdata:0000000140002070 ; const CHAR Text[]
.rdata:0000000140002070 Text            db 'Good work, Serial is valid !!!',0
.rdata:0000000140002070                                         ; DATA XREF: DialogFunc+60↑o
.rdata:000000014000208F                 align 10h
.rdata:0000000140002090 ; const CHAR aTryAgain[]
.rdata:0000000140002090 aTryAgain       db 'Try again...',0     ; DATA XREF: DialogFunc:loc_140001191↑o
.rdata:000000014000209D                 align 20h
.rdata:00000001400020A0 ; const CHAR aFailSerialIsIn[]
.rdata:00000001400020A0 aFailSerialIsIn db 'Fail, Serial is invalid !!!',0
.rdata:00000001400020A0                                         ; DATA XREF: DialogFunc+88↑o
.rdata:00000001400020BC stru_1400020BC  UNWIND_INFO_HDR <21h, 0, 2, 0>
.rdata:00000001400020BC                                         ; DATA XREF: .pdata:0000000140003018↓o
.rdata:00000001400020C0                 UNWIND_CODE <0, 34h>    ; UWOP_SAVE_NONVOL
.rdata:00000001400020C2                 dw 2
.rdata:00000001400020C4                 RUNTIME_FUNCTION <rva sub_140001000, rva loc_140001031, \
.rdata:00000001400020C4                                   rva stru_1400020E4>
.rdata:00000001400020D0 stru_1400020D0  UNWIND_INFO_HDR <21h, 5, 2, 0>
.rdata:00000001400020D0                                         ; DATA XREF: .pdata:000000014000300C↓o
.rdata:00000001400020D4                 UNWIND_CODE <5, 34h>    ; UWOP_SAVE_NONVOL
.rdata:00000001400020D6                 dw 2
.rdata:00000001400020D8                 RUNTIME_FUNCTION <rva sub_140001000, rva loc_140001031, \
.rdata:00000001400020D8                                   rva stru_1400020E4>
.rdata:00000001400020E4 stru_1400020E4  UNWIND_INFO_HDR <1, 4, 1, 0>
.rdata:00000001400020E4                                         ; DATA XREF: .rdata:00000001400020C4↑o
.rdata:00000001400020E4                                         ; .rdata:00000001400020D8↑o ...
.rdata:00000001400020E8                 UNWIND_CODE <4, 22h>    ; UWOP_ALLOC_SMALL
.rdata:00000001400020EA                 align 4
.rdata:00000001400020EC stru_1400020EC  UNWIND_INFO_HDR <21h, 0, 0, 0>
.rdata:00000001400020EC                                         ; DATA XREF: .pdata:000000014000303C↓o
.rdata:00000001400020F0                 RUNTIME_FUNCTION <rva DialogFunc, rva loc_1400011C1, \
.rdata:00000001400020F0                                   rva stru_140002110>
.rdata:00000001400020FC stru_1400020FC  UNWIND_INFO_HDR <21h, 8, 2, 0>
.rdata:00000001400020FC                                         ; DATA XREF: .pdata:0000000140003030↓o
.rdata:0000000140002100                 UNWIND_CODE <8, 34h>    ; UWOP_SAVE_NONVOL
.rdata:0000000140002102                 dw 10h
.rdata:0000000140002104                 RUNTIME_FUNCTION <rva DialogFunc, rva loc_1400011C1, \
.rdata:0000000140002104                                   rva stru_140002110>
.rdata:0000000140002110 stru_140002110  UNWIND_INFO_HDR <1, 6, 2, 0>
.rdata:0000000140002110                                         ; DATA XREF: .rdata:00000001400020F0↑o
.rdata:0000000140002110                                         ; .rdata:0000000140002104↑o ...
.rdata:0000000140002114                 UNWIND_CODE <6, 0D2h>   ; UWOP_ALLOC_SMALL
.rdata:0000000140002116                 UNWIND_CODE <2, 70h>    ; UWOP_PUSH_NONVOL
.rdata:0000000140002118 stru_140002118  UNWIND_INFO_HDR <1, 4, 1, 0>
.rdata:0000000140002118                                         ; DATA XREF: .pdata:0000000140003048↓o
.rdata:000000014000211C                 UNWIND_CODE <4, 62h>    ; UWOP_ALLOC_SMALL
.rdata:000000014000211E                 align 4
.rdata:0000000140002120 __IMPORT_DESCRIPTOR_KERNEL32 dd rva off_140002160 ; Import Name Table
.rdata:0000000140002124                 dd 0                    ; Time stamp
.rdata:0000000140002128                 dd 0                    ; Forwarder Chain
.rdata:000000014000212C                 dd rva aKernel32Dll     ; DLL Name
.rdata:0000000140002130                 dd rva GetModuleHandleA ; Import Address Table
.rdata:0000000140002134 __IMPORT_DESCRIPTOR_USER32 dd rva off_140002178 ; Import Name Table
.rdata:0000000140002138                 dd 0                    ; Time stamp
.rdata:000000014000213C                 dd 0                    ; Forwarder Chain
.rdata:0000000140002140                 dd rva aUser32Dll       ; DLL Name
.rdata:0000000140002144                 dd rva EndDialog        ; Import Address Table
.rdata:0000000140002148                 align 20h
.rdata:0000000140002160 ;
.rdata:0000000140002160 ; Import names for KERNEL32.dll
.rdata:0000000140002160 ;
.rdata:0000000140002160 off_140002160   dq rva word_1400021BE   ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32↑o
.rdata:0000000140002168                 dq rva word_1400021B0
.rdata:0000000140002170                 dq 0
.rdata:0000000140002178 ;
.rdata:0000000140002178 ; Import names for USER32.dll
.rdata:0000000140002178 ;
.rdata:0000000140002178 off_140002178   dq rva word_1400021E0   ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_USER32↑o
.rdata:0000000140002180                 dq rva word_1400021EC
.rdata:0000000140002188                 dq rva word_1400021FC
.rdata:0000000140002190                 dq rva word_140002208
.rdata:0000000140002198                 dq rva word_140002216
.rdata:00000001400021A0                 dq rva word_140002228
.rdata:00000001400021A8                 dq 0
.rdata:00000001400021B0 word_1400021B0  dw 0BCh                 ; DATA XREF: .rdata:0000000140002168↑o
.rdata:00000001400021B2                 db 'ExitProcess',0
.rdata:00000001400021BE word_1400021BE  dw 181h                 ; DATA XREF: .rdata:off_140002160↑o
.rdata:00000001400021C0                 db 'GetModuleHandleA',0
.rdata:00000001400021D1                 align 2
.rdata:00000001400021D2 aKernel32Dll    db 'KERNEL32.dll',0     ; DATA XREF: .rdata:000000014000212C↑o
.rdata:00000001400021DF                 align 20h
.rdata:00000001400021E0 word_1400021E0  dw 0C6h                 ; DATA XREF: .rdata:off_140002178↑o
.rdata:00000001400021E2                 db 'EndDialog',0
.rdata:00000001400021EC word_1400021EC  dw 23Eh                 ; DATA XREF: .rdata:0000000140002180↑o
.rdata:00000001400021EE                 db 'SendMessageA',0
.rdata:00000001400021FB                 align 4
.rdata:00000001400021FC word_1400021FC  dw 1C1h                 ; DATA XREF: .rdata:0000000140002188↑o
.rdata:00000001400021FE                 db 'LoadIconA',0
.rdata:0000000140002208 word_140002208  dw 1E2h                 ; DATA XREF: .rdata:0000000140002190↑o
.rdata:000000014000220A                 db 'MessageBoxA',0
.rdata:0000000140002216 word_140002216  dw 115h                 ; DATA XREF: .rdata:0000000140002198↑o
.rdata:0000000140002218                 db 'GetDlgItemTextA',0
.rdata:0000000140002228 word_140002228  dw 9Eh                  ; DATA XREF: .rdata:00000001400021A0↑o
.rdata:000000014000222A                 db 'DialogBoxParamA',0
.rdata:000000014000223A aUser32Dll      db 'USER32.dll',0       ; DATA XREF: .rdata:0000000140002140↑o
.rdata:0000000140002245                 align 1000h
.rdata:0000000140002245 _rdata          ends
.rdata:0000000140002245
.pdata:0000000140003000 ; Section 3. (virtual address 00003000)
.pdata:0000000140003000 ; Virtual size                  : 00000054 (     84.)
.pdata:0000000140003000 ; Section size in file          : 00000200 (    512.)
.pdata:0000000140003000 ; Offset to raw data for section: 00000C00
.pdata:0000000140003000 ; Flags 40000040: Data Readable
.pdata:0000000140003000 ; Alignment     : default
.pdata:0000000140003000 ; ===========================================================================
.pdata:0000000140003000
.pdata:0000000140003000 ; Segment type: Pure data
.pdata:0000000140003000 ; Segment permissions: Read
.pdata:0000000140003000 _pdata          segment para public 'DATA' use64
.pdata:0000000140003000                 assume cs:_pdata
.pdata:0000000140003000                 ;org 140003000h
.pdata:0000000140003000 ExceptionDir    RUNTIME_FUNCTION <rva sub_140001000, rva loc_140001031, \
.pdata:0000000140003000                                   rva stru_1400020E4>
.pdata:000000014000300C                 RUNTIME_FUNCTION <rva loc_140001031, rva loc_1400010FD, \
.pdata:000000014000300C                                   rva stru_1400020D0>
.pdata:0000000140003018                 RUNTIME_FUNCTION <rva loc_1400010FD, rva algn_140001109, \
.pdata:0000000140003018                                   rva stru_1400020BC>
.pdata:0000000140003024                 RUNTIME_FUNCTION <rva DialogFunc, rva loc_1400011C1, \
.pdata:0000000140003024                                   rva stru_140002110>
.pdata:0000000140003030                 RUNTIME_FUNCTION <rva loc_1400011C1, rva loc_140001225, \
.pdata:0000000140003030                                   rva stru_1400020FC>
.pdata:000000014000303C                 RUNTIME_FUNCTION <rva loc_140001225, rva algn_140001238, \
.pdata:000000014000303C                                   rva stru_1400020EC>
.pdata:0000000140003048                 RUNTIME_FUNCTION <rva start, rva algn_140001271, rva stru_140002118>
.pdata:0000000140003054                 align 1000h
.pdata:0000000140003054 _pdata          ends
.pdata:0000000140003054
.pdata:0000000140003054
.pdata:0000000140003054                 end start
